{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GmshReader.jl \u00b6 Introduction \u00b6 To read the Gmsh mesh file. Install \u00b6 1 ( v1 . 0 ) pkg > add https :// github . com / shipengcheng1230 / GmshReader . jl Limitations \u00b6 Current only support version 4 of ASCII mode. The following tags will be omitted: <$Periodic> <$NodeData> <$ElementData> <$ElementNodeData> <$InterpolationScheme> Element type of Tri7 of FEMBase is not supported since Gmsh does not have an equivalence type. Utilities \u00b6 Brief Summary: read_gmsh_ascii return a Dict of all supported fields that are self-explained. gmsh_read_mesh return a Vector{Element} along with the result returned by read_gmsh_ascii . The later part contains useful information for further manipulation. For FEMBase elements: \"geometry\" field is updated using numVerts \"tagEntity\" field of each element is stored using tagEntities . This field indicates which one of Entities , by comparing with its tags , a mesh bounds to (A 0D mesh, hence 1-node point, bounds to one of the Points , a 1D mesh Curves , a 2D mesh Surfaces and a 3D mesh Volumes ). The physicalTags of those Entities denotes which physical group recorded by tags inside PhysicalNames , of the same dimensions , it bounds.","title":"Home"},{"location":"#gmshreaderjl","text":"","title":"GmshReader.jl"},{"location":"#introduction","text":"To read the Gmsh mesh file.","title":"Introduction"},{"location":"#install","text":"1 ( v1 . 0 ) pkg > add https :// github . com / shipengcheng1230 / GmshReader . jl","title":"Install"},{"location":"#limitations","text":"Current only support version 4 of ASCII mode. The following tags will be omitted: <$Periodic> <$NodeData> <$ElementData> <$ElementNodeData> <$InterpolationScheme> Element type of Tri7 of FEMBase is not supported since Gmsh does not have an equivalence type.","title":"Limitations"},{"location":"#utilities","text":"Brief Summary: read_gmsh_ascii return a Dict of all supported fields that are self-explained. gmsh_read_mesh return a Vector{Element} along with the result returned by read_gmsh_ascii . The later part contains useful information for further manipulation. For FEMBase elements: \"geometry\" field is updated using numVerts \"tagEntity\" field of each element is stored using tagEntities . This field indicates which one of Entities , by comparing with its tags , a mesh bounds to (A 0D mesh, hence 1-node point, bounds to one of the Points , a 1D mesh Curves , a 2D mesh Surfaces and a 3D mesh Volumes ). The physicalTags of those Entities denotes which physical group recorded by tags inside PhysicalNames , of the same dimensions , it bounds.","title":"Utilities"},{"location":"read_mesh_raw/","text":"Display raw mesh data \u00b6 Try the following code to view the mesh: Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 using GmshReader using Makie # 2D Triangle-3 Mesh sampledir = joinpath ( dirname ( pathof ( GmshReader )), \"../test/samples\" ) |> abspath fname = joinpath ( sampledir , \"t1.msh\" ) meshraw = read_gmsh_ascii ( fname ) coordinates = cat ( meshraw [ \"Nodes\" ][ \"xs\" ], meshraw [ \"Nodes\" ][ \"ys\" ]; dims = 2 ) triangle_index = meshraw [ \"Elements\" ][ \"typeEles\" ] .== 2 connectivity = reduce ( hcat , meshraw [ \"Elements\" ][ \"numVerts\" ][ triangle_index ]) ' scene = mesh ( coordinates , connectivity ; shading = false , color =: white ); wireframe! ( scene [ end ][ 1 ], color = ( : deepskyblue , 0.1 ), linewidth = 3 ) # 3D Tetrahedron-4 Mesh fname = joinpath ( sampledir , \"t3.msh\" ) meshraw = read_gmsh_ascii ( fname ) coordinates = cat ( meshraw [ \"Nodes\" ][ \"xs\" ], meshraw [ \"Nodes\" ][ \"ys\" ], meshraw [ \"Nodes\" ][ \"zs\" ]; dims = 2 ) tetrahedron_index = meshraw [ \"Elements\" ][ \"typeEles\" ] .== 4 connectivity = reduce ( hcat , meshraw [ \"Elements\" ][ \"numVerts\" ][ tetrahedron_index ]) ' scene = mesh ( coordinates , connectivity ; shading = false , color =: white ); wireframe! ( scene [ end ][ 1 ], color = ( : deepskyblue , 0.1 ), linewidth = 3 , transparency = true ) Complete Element Type Codes Code Type Description 1 2-node line 2 3-node triangle 3 4-node quadrangle 4 4-node tetrahedron 5 8-node hexahedron 6 6-node prism 7 5-node pyramid 8 3-node second order line (2 nodes associated with the vertices and 1 with the edge). 9 6-node second order triangle (3 nodes associated with the vertices and 3 with the edges). 10 9-node second order quadrangle (4 nodes associated with the vertices, 4 with the edges and 1 with the face). 11 10-node second order tetrahedron (4 nodes associated with the vertices and 6 with the edges). 12 27-node second order hexahedron (8 nodes associated with the vertices, 12 with the edges, 6 with the faces and 1 with the volume). 13 18-node second order prism (6 nodes associated with the vertices, 9 with the edges and 3 with the quadrangular faces). 14 14-node second order pyramid (5 nodes associated with the vertices, 8 with the edges and 1 with the quadrangular face). 15 1-node point 16 8-node second order quadrangle (4 nodes associated with the vertices and 4 with the edges). 17 20-node second order hexahedron (8 nodes associated with the vertices and 12 with the edges). 18 15-node second order prism (6 nodes associated with the vertices and 9 with the edges). 19 13-node second order pyramid (5 nodes associated with the vertices and 8 with the edges). 20 9-node third order incomplete triangle (3 nodes associated with the vertices, 6 with the edges) 21 10-node third order triangle (3 nodes associated with the vertices, 6 with the edges, 1 with the face) 22 12-node fourth order incomplete triangle (3 nodes associated with the vertices, 9 with the edges) 23 15-node fourth order triangle (3 nodes associated with the vertices, 9 with the edges, 3 with the face) 24 15-node fifth order incomplete triangle (3 nodes associated with the vertices, 12 with the edges) 25 21-node fifth order complete triangle (3 nodes associated with the vertices, 12 with the edges, 6 with the face) 26 4-node third order edge (2 nodes associated with the vertices, 2 internal to the edge) 27 5-node fourth order edge (2 nodes associated with the vertices, 3 internal to the edge) 28 6-node fifth order edge (2 nodes associated with the vertices, 4 internal to the edge) 29 20-node third order tetrahedron (4 nodes associated with the vertices, 12 with the edges, 4 with the faces) 30 35-node fourth order tetrahedron (4 nodes associated with the vertices, 18 with the edges, 12 with the faces, 1 in the volume) 31 56-node fifth order tetrahedron (4 nodes associated with the vertices, 24 with the edges, 24 with the faces, 4 in the volume) 92 64-node third order hexahedron (8 nodes associated with the vertices, 24 with the edges, 24 with the faces, 8 in the volume) 93 125-node fourth order hexahedron (8 nodes associated with the vertices, 36 with the edges, 54 with the faces, 27 in the volume)","title":"Examples"},{"location":"read_mesh_raw/#display-raw-mesh-data","text":"Try the following code to view the mesh: Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 using GmshReader using Makie # 2D Triangle-3 Mesh sampledir = joinpath ( dirname ( pathof ( GmshReader )), \"../test/samples\" ) |> abspath fname = joinpath ( sampledir , \"t1.msh\" ) meshraw = read_gmsh_ascii ( fname ) coordinates = cat ( meshraw [ \"Nodes\" ][ \"xs\" ], meshraw [ \"Nodes\" ][ \"ys\" ]; dims = 2 ) triangle_index = meshraw [ \"Elements\" ][ \"typeEles\" ] .== 2 connectivity = reduce ( hcat , meshraw [ \"Elements\" ][ \"numVerts\" ][ triangle_index ]) ' scene = mesh ( coordinates , connectivity ; shading = false , color =: white ); wireframe! ( scene [ end ][ 1 ], color = ( : deepskyblue , 0.1 ), linewidth = 3 ) # 3D Tetrahedron-4 Mesh fname = joinpath ( sampledir , \"t3.msh\" ) meshraw = read_gmsh_ascii ( fname ) coordinates = cat ( meshraw [ \"Nodes\" ][ \"xs\" ], meshraw [ \"Nodes\" ][ \"ys\" ], meshraw [ \"Nodes\" ][ \"zs\" ]; dims = 2 ) tetrahedron_index = meshraw [ \"Elements\" ][ \"typeEles\" ] .== 4 connectivity = reduce ( hcat , meshraw [ \"Elements\" ][ \"numVerts\" ][ tetrahedron_index ]) ' scene = mesh ( coordinates , connectivity ; shading = false , color =: white ); wireframe! ( scene [ end ][ 1 ], color = ( : deepskyblue , 0.1 ), linewidth = 3 , transparency = true ) Complete Element Type Codes Code Type Description 1 2-node line 2 3-node triangle 3 4-node quadrangle 4 4-node tetrahedron 5 8-node hexahedron 6 6-node prism 7 5-node pyramid 8 3-node second order line (2 nodes associated with the vertices and 1 with the edge). 9 6-node second order triangle (3 nodes associated with the vertices and 3 with the edges). 10 9-node second order quadrangle (4 nodes associated with the vertices, 4 with the edges and 1 with the face). 11 10-node second order tetrahedron (4 nodes associated with the vertices and 6 with the edges). 12 27-node second order hexahedron (8 nodes associated with the vertices, 12 with the edges, 6 with the faces and 1 with the volume). 13 18-node second order prism (6 nodes associated with the vertices, 9 with the edges and 3 with the quadrangular faces). 14 14-node second order pyramid (5 nodes associated with the vertices, 8 with the edges and 1 with the quadrangular face). 15 1-node point 16 8-node second order quadrangle (4 nodes associated with the vertices and 4 with the edges). 17 20-node second order hexahedron (8 nodes associated with the vertices and 12 with the edges). 18 15-node second order prism (6 nodes associated with the vertices and 9 with the edges). 19 13-node second order pyramid (5 nodes associated with the vertices and 8 with the edges). 20 9-node third order incomplete triangle (3 nodes associated with the vertices, 6 with the edges) 21 10-node third order triangle (3 nodes associated with the vertices, 6 with the edges, 1 with the face) 22 12-node fourth order incomplete triangle (3 nodes associated with the vertices, 9 with the edges) 23 15-node fourth order triangle (3 nodes associated with the vertices, 9 with the edges, 3 with the face) 24 15-node fifth order incomplete triangle (3 nodes associated with the vertices, 12 with the edges) 25 21-node fifth order complete triangle (3 nodes associated with the vertices, 12 with the edges, 6 with the face) 26 4-node third order edge (2 nodes associated with the vertices, 2 internal to the edge) 27 5-node fourth order edge (2 nodes associated with the vertices, 3 internal to the edge) 28 6-node fifth order edge (2 nodes associated with the vertices, 4 internal to the edge) 29 20-node third order tetrahedron (4 nodes associated with the vertices, 12 with the edges, 4 with the faces) 30 35-node fourth order tetrahedron (4 nodes associated with the vertices, 18 with the edges, 12 with the faces, 1 in the volume) 31 56-node fifth order tetrahedron (4 nodes associated with the vertices, 24 with the edges, 24 with the faces, 4 in the volume) 92 64-node third order hexahedron (8 nodes associated with the vertices, 24 with the edges, 24 with the faces, 8 in the volume) 93 125-node fourth order hexahedron (8 nodes associated with the vertices, 36 with the edges, 54 with the faces, 27 in the volume)","title":"Display raw mesh data"}]}